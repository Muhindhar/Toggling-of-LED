#include <stdint.h>
#include "tm4c123gh6pm.h"

#define RED_LED    (1U << 1)  // PF1 - Red LED
#define GREEN_LED  (1U << 3)  // PF3 - Green LED
#define BLUE_LED   (1U << 2)  // PF2 - Blue LED
#define BUTTON     (1U << 4)  // PF4 - Switch button (SW1)

void delay_ms(int n);
void PortF_Init(void);
void Toggle_LEDs(uint8_t state);

int main(void) {
    PortF_Init();  // Initialize Port F for LEDs and button
    uint8_t ledState = 0;  // Keeps track of the current LED state

    while (1) {
        if ((GPIO_PORTF_DATA_R & BUTTON) == 0) {  // If button is pressed
            delay_ms(300);  // Debounce delay
            ledState++;  // Increment LED state

            if (ledState > 3) {
                ledState = 0;  // Reset to the first state (Red LED)
            }

            Toggle_LEDs(ledState);  // Change LED based on state
        }
    }
}

void PortF_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 5);  // Enable Clock for Port F
    while ((SYSCTL_PRGPIO_R & (1U << 5)) == 0);

    GPIO_PORTF_DIR_R |= (RED_LED | GREEN_LED | BLUE_LED);  // Set LEDs as Output
    GPIO_PORTF_DIR_R &= ~BUTTON;  // Set BUTTON as Input
    GPIO_PORTF_DEN_R |= (RED_LED | GREEN_LED | BLUE_LED | BUTTON);  // Enable Digital Function for LEDs and BUTTON
}

void Toggle_LEDs(uint8_t state) {
    // Turn off all LEDs first
    GPIO_PORTF_DATA_R &= ~(RED_LED | GREEN_LED | BLUE_LED);

    // Turn on LED based on the current state
    if (state == 0) {
        GPIO_PORTF_DATA_R |= RED_LED;  // Red LED
    } else if (state == 1) {
        GPIO_PORTF_DATA_R |= GREEN_LED;  // Green LED
    } else if (state == 2) {
        GPIO_PORTF_DATA_R |= BLUE_LED;  // Blue LED
    }
}

void delay_ms(int n) {
    volatile int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < 3180; j++) {}
    }
}
